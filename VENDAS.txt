/* 1. Altere a tabela de débitos para corrigir o campo situacao_debito. Se o débito estiver vencido e não for 'Negociado' nem 'Pago', informe 'Atrasado' */

UPDATE DEBITOS d
   SET d.SITUACAO_DEBITO = 'Atrasado'
 WHERE d.DATAVENCIMENTO < CURRENT_DATE
   AND d.SITUACAO_DEBITO NOT IN ('Negociado', 'Pago')

/* 2. Altere a tabela de débitos para corrigir o campo situacao _debito. Se o débito não estiver vencido e não for 'Pago', informe 'Pendente' */

UPDATE DEBITOS d
   SET d.SITUACAO_DEBITO = 'Pendente'
 WHERE d.DATAVENCIMENTO  >= CURRENT_DATE
   AND d.SITUACAO_DEBITO != 'Pago' 

/* 3. Altere a tabela de débitos para corrigir o campo data de vencimento. Se o débito estiver com a situação 'Negociado', altere o ano da data de vencimento para ano - 5 anos */

UPDATE DEBITOS d
   SET d.DATAVENCIMENTO  = DATEADD(YEAR, -5, d.DATAVENCIMENTO)
 WHERE d.SITUACAO_DEBITO = 'Negociado' 

/* 4. Selecione o nome, e-mail e telefone de todas as pessoas */

SELECT p.NOME
     , p.EMAIL
     , p.TELEFONE 
  FROM PESSOA p 

/* 5. Liste os produtos com preço unitário acima de R$ 100 */

SELECT *
  FROM PRODUTO p
 WHERE p.PRECO_UNITARIO > 100

/* 6. Retorne todas as vendas realizadas em uma determinada data */

SELECT *
  FROM VENDA v
 WHERE v.DATA_VENDA = '2022-04-01'

/* 7. Mostre o nome, a data de nascimento e a idade dos fornecedores que não têm produtos em estoque */

   SELECT p1.NOME
        , p1.DATA_NASCIMENTO
        , (EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p1.DATA_NASCIMENTO)) AS IDADE
     FROM FORNECEDOR f 
LEFT JOIN PESSOA p1    ON p1.ID_PESSOA      = F.ID_PESSOA 
LEFT JOIN PRODUTO p2   ON p2.ID_FORNECEDOR  = f.ID_FORNECEDOR 
    WHERE p2.QUANTIDADE_ESTOQUE = 0
       OR f.ID_FORNECEDOR NOT IN (SELECT p3.ID_FORNECEDOR 
                                    FROM PRODUTO p3 
                                   WHERE p3.ID_FORNECEDOR = f.ID_FORNECEDOR)

/* 8. Liste os clientes que já realizaram compras com débitos vencidos */

    SELECT * 
      FROM CLIENTE c
INNER JOIN DEBITOS d ON d.ID_CLIENTE = c.ID_CLIENTE
     WHERE d.DATAVENCIMENTO < CURRENT_DATE
       AND d.SITUACAO_DEBITO IN ('Pendente', 'Atrasado')

/* 10. Selecione os 10 maiores devedores trazendo código, nome, idade e a soma total dos débitos vencidos e a soma total dos débitos pagos */

    SELECT FIRST 10 c.ID_CLIENTE
         , p.NOME
         , (EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM p.DATA_NASCIMENTO)) AS IDADE
         , COALESCE((SELECT SUM(d.VALOR_TOTAL) 
              FROM DEBITOS d 
             WHERE d.ID_CLIENTE = c.ID_CLIENTE 
               AND d.SITUACAO_DEBITO = 'Atrasado'),0) AS TOTAL_DEBITOS_VENCIDOS
         , COALESCE((SELECT SUM(d.VALOR_TOTAL) 
              FROM DEBITOS d 
             WHERE d.ID_CLIENTE = c.ID_CLIENTE 
               AND d.SITUACAO_DEBITO = 'Pago'),0) AS TOTAL_DEBITOS_PAGOS
      FROM CLIENTE c
INNER JOIN PESSOA p ON c.ID_PESSOA = p.ID_PESSOA 
  ORDER BY 4 DESC

/* 11. Atualize o preço unitário de todos os produtos com estoque inferior a 10 unidades para mais 10% */

UPDATE PRODUTO p
   SET p.PRECO_UNITARIO = p.PRECO_UNITARIO * 1.10
 WHERE p.QUANTIDADE_ESTOQUE < 10

/* 13. Altere todos os débitos que estão com situação = 'Atrasado' para 'Pago' se o mesmo ter o registro na tabela de pagamento */
 
    UPDATE DEBITOS d
       SET d.SITUACAO_DEBITO = 'Pago'
     WHERE d.SITUACAO_DEBITO = 'Atrasado'
AND EXISTS (SELECT 1 
              FROM PAGAMENTO p 
             WHERE p.ID_DEBITO = d.ID_DEBITO)
 
/* 15. Selecione as vendas entre o mês de dezembro de 2023 até janeiro de 2024 */
 
SELECT *
  FROM VENDA v
 WHERE v.DATA_VENDA BETWEEN '2023-12-01' 
                        AND '2024-01-31'
             
/* 16. ﻿﻿﻿﻿Liste os produtos com estoque entre 5 e 20 unidades */
                        
SELECT *
  FROM PRODUTO p
 WHERE p.QUANTIDADE_ESTOQUE BETWEEN 5 
                                AND 20
 
/* 17. Retorne todas as pessoas com nomes que começam com 'A' */
                                
SELECT *
  FROM PESSOA p
 WHERE p.NOME LIKE 'A%'
 
/* 18. Selecione os produtos que não foram vendidos */
 
   SELECT * 
     FROM PRODUTO p
LEFT JOIN ITENSVENDA i ON p.ID_PRODUTO = i.ID_PRODUTO
    WHERE i.ID_PRODUTO IS NULL
 
/* 19. Liste os produtos vendidos para os clientes 'Carla Souza', 'Larissa Ferreira' */
 
    SELECT p.NOME 
      FROM PRODUTO p
INNER JOIN FORNECEDOR f ON f.ID_FORNECEDOR = p.ID_FORNECEDOR
INNER JOIN PESSOA p2    ON p2.ID_PESSOA    = f.ID_PESSOA
     WHERE p2.NOME IN ('Carla Souza', 'Larissa Ferreira')
 
/* 20. Mostre as pessoas que são clientes OU fornecedores */
 
SELECT *
  FROM PESSOA p
 WHERE p.ID_PESSOA IN (SELECT c.ID_PESSOA FROM CLIENTE c) 
    OR p.ID_PESSOA IN (SELECT f.ID_PESSOA FROM FORNECEDOR f)
 
/* 21. Retorne todas as informações da venda com detalhes do cliente e forma de pagamento */
 
    SELECT v.*
         , c.ID_CLIENTE 
         , c.CPF 
         , fp.DESCRICAO AS FORMA_PAGAMENTO
      FROM VENDA v
INNER JOIN CLIENTE c          ON c.ID_PESSOA           = v.ID_PESSOA
INNER JOIN FORMA_PAGAMENTO fp ON fp.ID_FORMA_PAGAMENTO = v.ID_FORMA_PAGAMENTO

/* 22. Mostre todas as compras de um determinado produto ('Placa de Captura'), incluindo detalhes do produto */
 
    SELECT v.*
         , p.* 
      FROM VENDA v
INNER JOIN ITENSVENDA i ON i.ID_VENDA   = v.ID_VENDA
INNER JOIN PRODUTO p    ON p.ID_PRODUTO = i.ID_PRODUTO
     WHERE p.NOME = 'Placa de Captura'
 
/* 23. Combine os nomes dos fornecedores com os nomes dos clientes e suas respectivas idades que irão fazer no ano de 2025 */
 
SELECT CAST('Cliente' AS varchar(30)) AS TIPO
          , p.NOME
          , p.ID_PESSOA
, (2025 - EXTRACT(YEAR FROM p.DATA_NASCIMENTO)) AS IDADE_2025
       FROM PESSOA p
 INNER JOIN CLIENTE c ON c.ID_PESSOA = p.ID_PESSOA
 
UNION

SELECT CAST('Fornecedor' AS varchar(30)) AS TIPO
          , p.NOME 
          , p.ID_PESSOA
          , (2025 - EXTRACT(YEAR FROM p.DATA_NASCIMENTO)) AS IDADE_2025
       FROM PESSOA p
 INNER JOIN FORNECEDOR f ON f.ID_PESSOA = p.ID_PESSOA
     
/* 24. ﻿﻿﻿﻿Retorne todos os logradouros e bairros, indicando se pertencem ou não a uma pessoa */
 
    SELECT e.ID_LOGRADOURO
         , l.NOME AS NOME_RUA
         , e.ID_BAIRRO
         , b.NOME AS NOME_BAIRRO
         , p.Nome AS NOME_PESSOA
         , p.EMAIL
      FROM ENDERECO e
INNER JOIN LOGRADOURO l ON l.ID_LOGRADOURO = e.ID_LOGRADOURO
INNER JOIN BAIRRO b     ON b.ID_BAIRRO     = e.ID_BAIRRO
INNER JOIN PESSOA p     ON p.ID_PESSOA     = e.ID_PESSOA
  ORDER BY 4, 2, 5
 
/* 25. Selecione os produtos que têm preço unitário superior à média */
 
SELECT *
  FROM PRODUTO p 
 WHERE p.PRECO_UNITARIO > (SELECT AVG(p2.PRECO_UNITARIO) FROM PRODUTO p2)
 
/* 26. Liste os clientes que fizeram compras em cidades com mais de 1 milhão de habitantes */
 
    SELECT p.NOME AS NOME_PESSOA
         , c.*
         , m.Nome AS NOME_MUNICIPIO
         , m.POPULACAO AS QTD_PESSOAS
      FROM VENDA v
INNER JOIN CLIENTE c   ON c.ID_PESSOA    = v.ID_PESSOA
INNER JOIN PESSOA p    ON p.ID_PESSOA    = c.ID_PESSOA
INNER JOIN ENDERECO e  ON e.ID_PESSOA    = p.ID_PESSOA
INNER JOIN MUNICIPIO m ON m.ID_MUNICIPIO = e.ID_MUNICIPIO
     WHERE m.POPULACAO > 1000000
 
/* 27. ﻿﻿﻿﻿Mostre a quantidade total de produtos vendidos por fornecedor */
 
    SELECT p2.NOME AS NOME_FORNECEDOR
         , SUM(iv.QUANTIDADE) AS TOTAL_PRODUTOS_VENDIDOS
      FROM ITENSVENDA iv
INNER JOIN PRODUTO p    ON p.ID_PRODUTO   = iv.ID_PRODUTO
INNER JOIN FORNECEDOR f ON f.ID_FORNECEDOR = p.ID_FORNECEDOR
INNER JOIN PESSOA p2    ON p2.ID_PESSOA    = f.ID_PESSOA 
  GROUP BY p2.NOME
 
/* 28. Liste os clientes que realizaram compras com valor total superior a R$ 500 */
 
    SELECT c.ID_CLIENTE
         , p.NOME
         , SUM(v.VALOR_TOTAL) AS TOTAL_COMPRAS
      FROM VENDA v
INNER JOIN PESSOA p  ON p.ID_PESSOA = v.ID_PESSOA
INNER JOIN CLIENTE c ON c.ID_PESSOA = p.ID_PESSOA
  GROUP BY c.ID_CLIENTE
         , p.NOME
    HAVING SUM(v.VALOR_TOTAL) > 500
 
/* 29. Retorne todas as pessoas com seus endereços de correspondência e residência, se tiverem */
 
    SELECT p.NOME AS PESSOA
         , b.NOME AS BAIRRO
         , m.NOME AS MUNICIPIO
         , l.NOME AS LOGRADOURO
      FROM ENDERECO e 
INNER JOIN PESSOA p     ON p.ID_PESSOA     = e.ID_PESSOA 
INNER JOIN LOGRADOURO l ON e.ID_LOGRADOURO = l.ID_LOGRADOURO 
INNER JOIN MUNICIPIO m  ON e.ID_MUNICIPIO  = m.ID_MUNICIPIO 
INNER JOIN BAIRRO b     ON e.ID_BAIRRO     = b.ID_BAIRRO 
 
/* 30. Liste os produtos e seus preços, juntamente com o nome do fornecedor, mesmo que não tenham fornecedor */
 
   SELECT p.NOME AS NOME_PRODUTO
        , p.PRECO_UNITARIO
        , p2.NOME AS NOME_FORNECEDOR
     FROM PRODUTO p
LEFT JOIN FORNECEDOR f ON p.ID_FORNECEDOR = f.ID_FORNECEDOR
LEFT JOIN PESSOA p2    ON p2.ID_PESSOA    = f.ID_PESSOA 

/* 31. ﻿﻿﻿﻿Liste os produtos em ordem decrescente de quantidade em estoque */
 
  SELECT p.NOME
       , p.QUANTIDADE_ESTOQUE 
    FROM PRODUTO p
ORDER BY QUANTIDADE_ESTOQUE DESC
 
/* 32. Retorne as vendas em ordem crescente de valor total */
 
  SELECT *
    FROM VENDA v
ORDER BY v.VALOR_TOTAL ASC 
 
/* 33. Liste os produtos com quantidade em estoque menor que a média de todos os produtos */
 
SELECT *
  FROM PRODUTO p1
 WHERE p1.QUANTIDADE_ESTOQUE < (SELECT AVG(p2.QUANTIDADE_ESTOQUE) 
                                 FROM PRODUTO p2)
 
/* 34. ﻿﻿﻿﻿Selecione todas as pessoas cujo número de telefone seja igual ao de outra pessoa */
 
      SELECT p1.NOME
           , p1.TELEFONE 
        FROM PESSOA p1
WHERE EXISTS (SELECT 1 
                FROM PESSOA p2
               WHERE p2.TELEFONE = p1.TELEFONE 
                 AND p2.ID_PESSOA != p1.ID_PESSOA)

/* 35. Aumente em 10% o preço unitário de todos os produtos fornecidos por fornecedores de São Paulo */
 
UPDATE PRODUTO p
   SET p.PRECO_UNITARIO = p.PRECO_UNITARIO * 1.10
 WHERE p.ID_FORNECEDOR IN (SELECT f.ID_FORNECEDOR
                            FROM FORNECEDOR f
                      INNER JOIN PESSOA ps   ON f.ID_PESSOA    = ps.ID_PESSOA
                      INNER JOIN ENDERECO e  ON ps.ID_PESSOA   = e.ID_PESSOA
                      INNER JOIN MUNICIPIO m ON e.ID_MUNICIPIO = m.ID_MUNICIPIO
                           WHERE m.NOME = 'São Paulo')
 
/* 36. Liste todas as vendas que estão com débito 'Negociado' */

    SELECT d.ID_VENDA
         , d.SITUACAO_DEBITO 
      FROM DEBITOS d
INNER JOIN VENDA v ON v.ID_VENDA = d.ID_VENDA
     WHERE d.SITUACAO_DEBITO = 'Negociado'